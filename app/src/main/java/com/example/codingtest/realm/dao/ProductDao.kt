package com.example.codingtest.realm.daoimport androidx.lifecycle.LiveDataimport androidx.lifecycle.MutableLiveDataimport com.example.codingtest.realm.entity.CategoryEntityimport com.example.codingtest.realm.entity.CategoryEntityInnerimport com.example.codingtest.realm.entity.ProductEntityimport io.realm.Realmclass ProductDao(private val mRealm: Realm) {    //while updating medicine will check that it is locally deleted or not    fun insertOrUpdateMedicineMenu(entity: ArrayList<CategoryEntityInner>?): MutableLiveData<Boolean> {        val isSuccess = MutableLiveData<Boolean>()        mRealm.use {            it.executeTransactionAsync(                Realm.Transaction                { realm -> realm.insertOrUpdate(entity) },                Realm.Transaction.OnSuccess                {                    isSuccess.value = true                })        }        return isSuccess    }    fun getMedicinMenu(): LiveData<List<CategoryEntityInner>> {        val entity = MutableLiveData<List<CategoryEntityInner>>()        val result = mRealm.where(CategoryEntityInner::class.java)            // .equalTo("item_status", "view")            // .equalTo("item_status", "like/View")            .findAll()        entity.value=mRealm.copyFromRealm(result)        return entity    }    fun getSingleMagazineDataById(title: String): MutableLiveData<ProductEntity> {        val MagazineEntity = MutableLiveData<ProductEntity>()        val result = mRealm.where(ProductEntity::class.java)            .equalTo("title", title).findFirst()        MagazineEntity.value = mRealm.copyFromRealm(result!!)        return MagazineEntity    }}