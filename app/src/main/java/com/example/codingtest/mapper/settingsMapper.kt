package com.example.codingtest.mapperimport com.example.codingtest.network.Categoryimport com.example.codingtest.network.Productimport com.example.codingtest.network.json_responseimport com.example.codingtest.realm.entity.CategoryEntityimport com.example.codingtest.realm.entity.CategoryEntityInnerimport com.example.codingtest.realm.entity.ProductEntityimport io.realm.RealmListimport io.realm.RealmObjectfun MapCategoryToEntity(response: ArrayList<Category>): ArrayList<CategoryEntityInner>? {    val diaryGraphList = ArrayList<CategoryEntityInner>()    // val parser = java.time.format.DateTimeFormatter.ISO_OFFSET_DATE_TIME    for (activationData in response) {        diaryGraphList.add(CategoryEntityInner().apply {            title = activationData.title            val optionEntityList: MutableList<ProductEntity> = mutableListOf()            if(!activationData.products.isNullOrEmpty())            {                for (i in activationData.products ) {                    optionEntityList.add(mapMedicineMenuToResponse(i))                }                products = convertToRealmList(optionEntityList)            }        })    }    return diaryGraphList}fun <T : RealmObject> convertRealmToList(realmList: RealmList<T>): ArrayList<T> {    val list = ArrayList<T>()    list.addAll(realmList)    return list}fun <T : RealmObject> convertToRealmList(list: List<T>): RealmList<T> {    val realmList = RealmList<T>()    realmList.addAll(list)    return realmList}fun mapMedicineMenuToResponse(activationData: Product): ProductEntity {    return ProductEntity().apply {        description=activationData.description        imageUrl=activationData.imageUrl        price=activationData.price        title=activationData.title    }}